generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  loginid   String   @unique
  role      UserRole @default(CONTACT_USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  createdContacts       Contact[]         @relation("CreatedBy")
  createdProducts       Product[]         @relation("CreatedBy")
  createdTaxes          Tax[]             @relation("CreatedBy")
  createdAccounts       ChartOfAccount[]  @relation("CreatedBy")
  createdPurchaseOrders PurchaseOrder[]   @relation("CreatedBy")
  createdVendorBills    VendorBill[]      @relation("CreatedBy")
  createdSalesOrders    SalesOrder[]      @relation("CreatedBy")
  createdInvoices       CustomerInvoice[] @relation("CreatedBy")
  createdPayments       Payment[]         @relation("CreatedBy")
}

enum UserRole {
  ADMIN
  INVOICING_USER
  CONTACT_USER
}

model Contact {
  id           String      @id @default(cuid())
  name         String
  type         ContactType
  email        String?     @unique
  mobile       String?
  address      String?
  city         String?
  state        String?
  pincode      String?
  profileImage String?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdById  String

  // Relations
  createdBy        User              @relation("CreatedBy", fields: [createdById], references: [id])
  purchaseOrders   PurchaseOrder[]   @relation("Vendor")
  vendorBills      VendorBill[]      @relation("Vendor")
  salesOrders      SalesOrder[]      @relation("Customer")
  customerInvoices CustomerInvoice[] @relation("Customer")
  payments         Payment[]         @relation("ContactPayments")
  razorpayCustomer RazorpayCustomer?

  @@map("contacts")
}

enum ContactType {
  CUSTOMER
  VENDOR
  BOTH
}

//product master
model Product {
  id              String      @id @default(cuid())
  name            String // Product Name
  type            ProductType // Goods/Service
  salesPrice      Decimal     @db.Decimal(10, 2) // Sales Price
  purchasePrice   Decimal     @db.Decimal(10, 2) // Purchase Price
  saleTaxRate     Decimal     @db.Decimal(5, 2) // Sale Tax %
  purchaseTaxRate Decimal     @db.Decimal(5, 2) // Purchase Tax %
  hsnCode         String? // HSN Code
  category        String? // Category
  currentStock    Int         @default(0)
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdById     String

  // Relations
  createdBy            User                  @relation("CreatedBy", fields: [createdById], references: [id])
  purchaseOrderItems   PurchaseOrderItem[]
  vendorBillItems      VendorBillItem[]
  salesOrderItems      SalesOrderItem[]
  customerInvoiceItems CustomerInvoiceItem[]

  @@map("products")
}

enum ProductType {
  GOODS
  SERVICE
}

//  Tax Master
model Tax {
  id                String            @id @default(cuid())
  name              String // Tax Name (e.g., "GST 18%", "CGST 9%")
  computationMethod ComputationMethod // Percentage/Fixed Value
  rate              Decimal?          @db.Decimal(5, 2) // For percentage
  fixedValue        Decimal?          @db.Decimal(10, 2) // For fixed amount
  applicableOn      ApplicableOn // Sales/Purchase
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdById       String

  // Relations
  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("taxes")
}

enum ComputationMethod {
  PERCENTAGE
  FIXED_VALUE
}

enum ApplicableOn {
  SALES
  PURCHASE
  BOTH
}

// Chart of Accounts Master
model ChartOfAccount {
  id          String      @id @default(cuid())
  name        String // Account Name (Cash, Bank, Sales Income, etc.)
  code        String      @unique // Account Code (1001, 2001, etc.)
  type        AccountType // Asset, Liability, Expense, Income, Equity
  parentId    String? // For sub-accounts
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String

  // Relations
  createdBy User             @relation("CreatedBy", fields: [createdById], references: [id])
  parent    ChartOfAccount?  @relation("ParentChild", fields: [parentId], references: [id])
  children  ChartOfAccount[] @relation("ParentChild")
  payments  Payment[]        @relation("AccountPayments")

  @@map("chart_of_accounts")
}

enum AccountType {
  ASSET // Cash, Bank, Debtors
  LIABILITY // Creditors
  EXPENSE // Purchase Expense
  INCOME // Sale Income
  EQUITY
}

// Purchase Order
model PurchaseOrder {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  vendorId    String // Link to Contact where type = VENDOR
  orderDate   DateTime    @default(now())
  totalAmount Decimal     @db.Decimal(12, 2)
  taxAmount   Decimal     @db.Decimal(12, 2)
  status      OrderStatus @default(DRAFT)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String

  // Relations
  createdBy   User                @relation("CreatedBy", fields: [createdById], references: [id])
  vendor      Contact             @relation("Vendor", fields: [vendorId], references: [id])
  items       PurchaseOrderItem[]
  vendorBills VendorBill[] // PO converts to Bill

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String  @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitPrice       Decimal @db.Decimal(10, 2)
  taxRate         Decimal @db.Decimal(5, 2) // 5%/10%
  lineTotal       Decimal @db.Decimal(12, 2)

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])

  @@map("purchase_order_items")
}

//  Vendor Bill (Converted from PO)
model VendorBill {
  id              String     @id @default(cuid())
  billNumber      String     @unique
  purchaseOrderId String? // Link to original PO
  vendorId        String
  invoiceDate     DateTime
  dueDate         DateTime
  totalAmount     Decimal    @db.Decimal(12, 2)
  taxAmount       Decimal    @db.Decimal(12, 2)
  paidAmount      Decimal    @default(0) @db.Decimal(12, 2)
  status          BillStatus @default(UNPAID)
  notes           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  createdById     String

  // Relations
  createdBy     User             @relation("CreatedBy", fields: [createdById], references: [id])
  purchaseOrder PurchaseOrder?   @relation(fields: [purchaseOrderId], references: [id])
  vendor        Contact          @relation("Vendor", fields: [vendorId], references: [id])
  items         VendorBillItem[]
  payments      Payment[]

  @@map("vendor_bills")
}

model VendorBillItem {
  id           String  @id @default(cuid())
  vendorBillId String
  productId    String
  quantity     Int
  unitPrice    Decimal @db.Decimal(10, 2)
  taxRate      Decimal @db.Decimal(5, 2)
  lineTotal    Decimal @db.Decimal(12, 2)

  // Relations
  vendorBill VendorBill @relation(fields: [vendorBillId], references: [id])
  product    Product    @relation(fields: [productId], references: [id])

  @@map("vendor_bill_items")
}

//  Sales Order
model SalesOrder {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  customerId  String // Link to Contact where type = CUSTOMER
  orderDate   DateTime    @default(now())
  totalAmount Decimal     @db.Decimal(12, 2)
  taxAmount   Decimal     @db.Decimal(12, 2)
  status      OrderStatus @default(DRAFT)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String

  // Relations
  createdBy        User              @relation("CreatedBy", fields: [createdById], references: [id])
  customer         Contact           @relation("Customer", fields: [customerId], references: [id])
  items            SalesOrderItem[]
  customerInvoices CustomerInvoice[] // SO converts to Invoice

  @@map("sales_orders")
}

model SalesOrderItem {
  id           String  @id @default(cuid())
  salesOrderId String
  productId    String
  quantity     Int
  unitPrice    Decimal @db.Decimal(10, 2)
  taxRate      Decimal @db.Decimal(5, 2) // Tax %
  lineTotal    Decimal @db.Decimal(12, 2)

  // Relations
  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id])
  product    Product    @relation(fields: [productId], references: [id])

  @@map("sales_order_items")
}

// Customer Invoice (Generated from SO)
model CustomerInvoice {
  id             String        @id @default(cuid())
  invoiceNumber  String        @unique
  salesOrderId   String? // Link to original SO
  customerId     String
  invoiceDate    DateTime      @default(now())
  dueDate        DateTime
  totalAmount    Decimal       @db.Decimal(12, 2)
  taxAmount      Decimal       @db.Decimal(12, 2)
  receivedAmount Decimal       @default(0) @db.Decimal(12, 2)
  status         InvoiceStatus @default(UNPAID)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdById    String

  // Relations
  createdBy     User                  @relation("CreatedBy", fields: [createdById], references: [id])
  salesOrder    SalesOrder?           @relation(fields: [salesOrderId], references: [id])
  customer      Contact               @relation("Customer", fields: [customerId], references: [id])
  items         CustomerInvoiceItem[]
  payments      Payment[]             @relation("InvoicePayments")
  razorpayOrder RazorpayOrder?

  @@map("customer_invoices")
}

model CustomerInvoiceItem {
  id                String  @id @default(cuid())
  customerInvoiceId String
  productId         String
  quantity          Int
  unitPrice         Decimal @db.Decimal(10, 2)
  taxRate           Decimal @db.Decimal(5, 2)
  lineTotal         Decimal @db.Decimal(12, 2)

  // Relations
  customerInvoice CustomerInvoice @relation(fields: [customerInvoiceId], references: [id])
  product         Product         @relation(fields: [productId], references: [id])

  @@map("customer_invoice_items")
}

enum OrderStatus {
  DRAFT
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum BillStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  OVERDUE
}

enum InvoiceStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  OVERDUE
}

//  Payment (Against Bill/Invoice)
model Payment {
  id                String        @id @default(cuid())
  paymentNumber     String        @unique
  type              PaymentType // RECEIVED (from customer) / PAID (to vendor)
  amount            Decimal       @db.Decimal(12, 2)
  paymentDate       DateTime      @default(now())
  paymentMethod     PaymentMethod // Cash/Bank
  reference         String?
  contactId         String
  vendorBillId      String? // ✅ Payment against vendor bill
  customerInvoiceId String? // ✅ Payment against customer invoice
  accountId         String // ✅ Cash/Bank account
  notes             String?

  // Razorpay fields
  razorpayPaymentId String?
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdById       String

  // Relations
  createdBy       User             @relation("CreatedBy", fields: [createdById], references: [id])
  contact         Contact          @relation("ContactPayments", fields: [contactId], references: [id])
  vendorBill      VendorBill?      @relation(fields: [vendorBillId], references: [id])
  customerInvoice CustomerInvoice? @relation("InvoicePayments", fields: [customerInvoiceId], references: [id])
  account         ChartOfAccount   @relation("AccountPayments", fields: [accountId], references: [id])

  @@map("payments")
}

enum PaymentType {
  RECEIVED // From customer
  PAID // To vendor
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  RAZORPAY
}

// ✅ Razorpay Integration (Simplified for Customer Payments)
model RazorpayCustomer {
  id         String @id @default(cuid())
  contactId  String @unique
  razorpayId String @unique

  // Relations
  contact Contact         @relation(fields: [contactId], references: [id])
  orders  RazorpayOrder[]

  @@map("razorpay_customers")
}

model RazorpayOrder {
  id         String @id @default(cuid())
  invoiceId  String @unique
  razorpayId String @unique
  amount     Int
  status     String @default("created")
  customerId String

  // Relations
  invoice  CustomerInvoice  @relation(fields: [invoiceId], references: [id])
  customer RazorpayCustomer @relation(fields: [customerId], references: [id])

  @@map("razorpay_orders")
}
