generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id @default(cuid())
  email                 String            @unique
  name                  String
  loginid               String            @unique
  role                  UserRole          @default(CONTACT_USER)
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  createdAccounts       ChartOfAccount[]  @relation("CreatedBy")
  createdContacts       Contact[]         @relation("CreatedBy")
  createdInvoices       CustomerInvoice[] @relation("CreatedBy")
  createdPayments       Payment[]         @relation("CreatedBy")
  createdProducts       Product[]         @relation("CreatedBy")
  createdPurchaseOrders PurchaseOrder[]   @relation("CreatedBy")
  createdSalesOrders    SalesOrder[]      @relation("CreatedBy")
  createdTaxes          Tax[]             @relation("CreatedBy")
  createdVendorBills    VendorBill[]      @relation("CreatedBy")
}

model Contact {
  id               String            @id @default(cuid())
  name             String
  type             ContactType
  email            String?           @unique
  mobile           String?
  address          String?
  city             String?
  state            String?
  pincode          String?
  profileImage     String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdById      String
  createdBy        User              @relation("CreatedBy", fields: [createdById], references: [id])
  customerInvoices CustomerInvoice[] @relation("Customer")
  payments         Payment[]         @relation("ContactPayments")
  purchaseOrders   PurchaseOrder[]   @relation("Vendor")
  razorpayCustomer RazorpayCustomer?
  salesOrders      SalesOrder[]      @relation("Customer")
  vendorBills      VendorBill[]      @relation("Vendor")
}

model Product {
  id                   String                @id @default(cuid())
  name                 String
  type                 ProductType
  salesPrice           Decimal               @db.Decimal(10, 2)
  purchasePrice        Decimal               @db.Decimal(10, 2)
  saleTaxRate          Decimal               @db.Decimal(5, 2)
  purchaseTaxRate      Decimal               @db.Decimal(5, 2)
  hsnCode              String?
  category             String?
  currentStock         Int                   @default(0)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  createdById          String
  customerInvoiceItems CustomerInvoiceItem[]
  createdBy            User                  @relation("CreatedBy", fields: [createdById], references: [id])
  purchaseOrderItems   PurchaseOrderItem[]
  salesOrderItems      SalesOrderItem[]
  vendorBillItems      VendorBillItem[]
}

model Tax {
  id                String            @id @default(cuid())
  name              String
  computationMethod ComputationMethod
  rate              Decimal?          @db.Decimal(5, 2)
  fixedValue        Decimal?          @db.Decimal(10, 2)
  applicableOn      ApplicableOn
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdById       String
  createdBy         User              @relation("CreatedBy", fields: [createdById], references: [id])
}

model ChartOfAccount {
  id             String           @id @default(cuid())
  name           String
  code           String           @unique
  type           AccountType
  parentId       String?
  openingBalance Decimal          @default(0) @db.Decimal(12, 2)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdById    String
  createdBy      User             @relation("CreatedBy", fields: [createdById], references: [id])
  parent         ChartOfAccount?  @relation("ParentChild", fields: [parentId], references: [id])
  children       ChartOfAccount[] @relation("ParentChild")
  payments       Payment[]        @relation("AccountPayments")
}

model PurchaseOrder {
  id          String              @id @default(cuid())
  orderNumber String              @unique
  vendorId    String
  orderDate   DateTime            @default(now())
  totalAmount Decimal             @db.Decimal(12, 2)
  taxAmount   Decimal             @db.Decimal(12, 2)
  status      OrderStatus         @default(DRAFT)
  notes       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  createdById String
  createdBy   User                @relation("CreatedBy", fields: [createdById], references: [id])
  vendor      Contact             @relation("Vendor", fields: [vendorId], references: [id])
  items       PurchaseOrderItem[]
  vendorBills VendorBill[]
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitPrice       Decimal       @db.Decimal(10, 2)
  taxRate         Decimal       @db.Decimal(5, 2)
  lineTotal       Decimal       @db.Decimal(12, 2)
  product         Product       @relation(fields: [productId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model VendorBill {
  id              String           @id @default(cuid())
  billNumber      String           @unique
  purchaseOrderId String?
  vendorId        String
  invoiceDate     DateTime
  dueDate         DateTime
  totalAmount     Decimal          @db.Decimal(12, 2)
  taxAmount       Decimal          @db.Decimal(12, 2)
  paidAmount      Decimal          @default(0) @db.Decimal(12, 2)
  status          BillStatus       @default(UNPAID)
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdById     String
  payments        Payment[]
  createdBy       User             @relation("CreatedBy", fields: [createdById], references: [id])
  purchaseOrder   PurchaseOrder?   @relation(fields: [purchaseOrderId], references: [id])
  vendor          Contact          @relation("Vendor", fields: [vendorId], references: [id])
  items           VendorBillItem[]
}

model VendorBillItem {
  id           String     @id @default(cuid())
  vendorBillId String
  productId    String
  quantity     Int
  unitPrice    Decimal    @db.Decimal(10, 2)
  taxRate      Decimal    @db.Decimal(5, 2)
  lineTotal    Decimal    @db.Decimal(12, 2)
  product      Product    @relation(fields: [productId], references: [id])
  vendorBill   VendorBill @relation(fields: [vendorBillId], references: [id])
}

model SalesOrder {
  id               String            @id @default(cuid())
  orderNumber      String            @unique
  customerId       String
  orderDate        DateTime          @default(now())
  totalAmount      Decimal           @db.Decimal(12, 2)
  taxAmount        Decimal           @db.Decimal(12, 2)
  status           OrderStatus       @default(DRAFT)
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdById      String
  customerInvoices CustomerInvoice[]
  createdBy        User              @relation("CreatedBy", fields: [createdById], references: [id])
  customer         Contact           @relation("Customer", fields: [customerId], references: [id])
  items            SalesOrderItem[]
}

model SalesOrderItem {
  id           String     @id @default(cuid())
  salesOrderId String
  productId    String
  quantity     Int
  unitPrice    Decimal    @db.Decimal(10, 2)
  taxRate      Decimal    @db.Decimal(5, 2)
  lineTotal    Decimal    @db.Decimal(12, 2)
  product      Product    @relation(fields: [productId], references: [id])
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id])
}

model CustomerInvoice {
  id             String                @id @default(cuid())
  invoiceNumber  String                @unique
  salesOrderId   String?
  customerId     String
  invoiceDate    DateTime              @default(now())
  dueDate        DateTime
  totalAmount    Decimal               @db.Decimal(12, 2)
  taxAmount      Decimal               @db.Decimal(12, 2)
  receivedAmount Decimal               @default(0) @db.Decimal(12, 2)
  status         InvoiceStatus         @default(UNPAID)
  notes          String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  createdById    String
  createdBy      User                  @relation("CreatedBy", fields: [createdById], references: [id])
  customer       Contact               @relation("Customer", fields: [customerId], references: [id])
  salesOrder     SalesOrder?           @relation(fields: [salesOrderId], references: [id])
  items          CustomerInvoiceItem[]
  payments       Payment[]             @relation("InvoicePayments")
  razorpayOrder  RazorpayOrder?
}

model CustomerInvoiceItem {
  id                String          @id @default(cuid())
  customerInvoiceId String
  productId         String
  quantity          Int
  unitPrice         Decimal         @db.Decimal(10, 2)
  taxRate           Decimal         @db.Decimal(5, 2)
  lineTotal         Decimal         @db.Decimal(12, 2)
  customerInvoice   CustomerInvoice @relation(fields: [customerInvoiceId], references: [id])
  product           Product         @relation(fields: [productId], references: [id])
}

model Payment {
  id                String           @id @default(cuid())
  paymentNumber     String           @unique
  type              PaymentType
  amount            Decimal          @db.Decimal(12, 2)
  paymentDate       DateTime         @default(now())
  paymentMethod     PaymentMethod
  reference         String?
  contactId         String
  vendorBillId      String?
  customerInvoiceId String?
  accountId         String
  notes             String?
  razorpayPaymentId String?
  status            String           @default("pending")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdById       String
  account           ChartOfAccount   @relation("AccountPayments", fields: [accountId], references: [id])
  contact           Contact          @relation("ContactPayments", fields: [contactId], references: [id])
  createdBy         User             @relation("CreatedBy", fields: [createdById], references: [id])
  customerInvoice   CustomerInvoice? @relation("InvoicePayments", fields: [customerInvoiceId], references: [id])
  vendorBill        VendorBill?      @relation(fields: [vendorBillId], references: [id])
}

model RazorpayCustomer {
  id         String          @id @default(cuid())
  contactId  String          @unique
  razorpayId String          @unique
  contact    Contact         @relation(fields: [contactId], references: [id])
  orders     RazorpayOrder[]
}

model RazorpayOrder {
  id         String           @id @default(cuid())
  invoiceId  String           @unique
  razorpayId String           @unique
  amount     Int
  status     String           @default("created")
  customerId String
  customer   RazorpayCustomer @relation(fields: [customerId], references: [id])
  invoice    CustomerInvoice  @relation(fields: [invoiceId], references: [id])
}

enum UserRole {
  INVOICING_USER
  ADMIN
  CONTACT_USER
}

enum ContactType {
  CUSTOMER
  VENDOR
  BOTH
}

enum ProductType {
  GOODS
  SERVICE
}

enum ComputationMethod {
  PERCENTAGE
  FIXED_VALUE
}

enum ApplicableOn {
  SALES
  PURCHASE
  BOTH
}

enum AccountType {
  ASSET
  LIABILITY
  EXPENSE
  INCOME
  EQUITY
}

enum OrderStatus {
  DRAFT
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum BillStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  OVERDUE
}

enum InvoiceStatus {
  UNPAID
  PAID
  PARTIALLY_PAID
  OVERDUE
}

enum PaymentType {
  RECEIVED
  PAID
}

enum PaymentMethod {
  CASH
  RAZORPAY
  BANK_TRANSFER
}
